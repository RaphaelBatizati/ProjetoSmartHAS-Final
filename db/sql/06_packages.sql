-- 06_packages.sql (PKG_SMART_HAS + AUDIT_LOG + Dynamic SQL)
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';
BEGIN
  EXECUTE IMMEDIATE '
    CREATE TABLE AUDIT_LOG (
      AUDIT_ID    NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
      EVENT_TS    TIMESTAMP DEFAULT SYSTIMESTAMP,
      ENTITY      VARCHAR2(50),
      ENTITY_ID   NUMBER,
      ACTION      VARCHAR2(50),
      DETAILS     VARCHAR2(4000)
    )';
EXCEPTION WHEN OTHERS THEN IF SQLCODE != -955 THEN RAISE; END IF;
END;
/

CREATE OR REPLACE PACKAGE PKG_SMART_HAS AS
  FUNCTION FN_SENSOR_AVG_KWH (P_SENSOR_ID IN NUMBER, P_DAYS IN NUMBER) RETURN NUMBER;
  PROCEDURE PR_INSERT_READING_AND_ALERT (
    P_SENSOR_ID IN NUMBER,
    P_VALUE_W   IN NUMBER,
    P_TEMP_C    IN NUMBER DEFAULT NULL,
    P_HUM_PCT   IN NUMBER DEFAULT NULL,
    P_ALERT_ID  OUT NUMBER
  );
  PROCEDURE PR_LOG_AUDIT (
    P_ENTITY  IN VARCHAR2,
    P_ID      IN NUMBER,
    P_ACTION  IN VARCHAR2,
    P_DETAILS IN VARCHAR2
  );
  PROCEDURE PR_QUERY_READINGS_DYNAMIC (
    P_TABLE_NAME   IN VARCHAR2,
    P_WHERE_CLAUSE IN VARCHAR2,
    P_CURSOR       OUT SYS_REFCURSOR
  );
END PKG_SMART_HAS;
/
SHOW ERRORS;

CREATE OR REPLACE PACKAGE BODY PKG_SMART_HAS AS
  FUNCTION FN_SENSOR_AVG_KWH (P_SENSOR_ID IN NUMBER, P_DAYS IN NUMBER) RETURN NUMBER IS
    V_AVG_KWH NUMBER;
  BEGIN
    SELECT AVG(POWER_W)/1000 INTO V_AVG_KWH
      FROM (
        SELECT TRUNC(READING_TS, 'HH') H, AVG(NVL(POWER_W,0)) POWER_W
          FROM SENSOR_READING
         WHERE SENSOR_ID = P_SENSOR_ID
           AND READING_TS >= SYSTIMESTAMP - NUMTODSINTERVAL(P_DAYS, 'DAY')
         GROUP BY TRUNC(READING_TS, 'HH')
      );
    RETURN NVL(V_AVG_KWH,0);
  EXCEPTION WHEN NO_DATA_FOUND THEN RETURN 0;
  END;
  PROCEDURE PR_INSERT_READING_AND_ALERT (
    P_SENSOR_ID IN NUMBER, P_VALUE_W IN NUMBER, P_TEMP_C IN NUMBER, P_HUM_PCT IN NUMBER, P_ALERT_ID OUT NUMBER
  ) IS
    V_MIN NUMBER; V_MAX NUMBER; V_UNIT VARCHAR2(10);
    V_MSG VARCHAR2(400); V_LEVEL VARCHAR2(20);
  BEGIN
    SELECT CRITICAL_MIN, CRITICAL_MAX, UNIT INTO V_MIN, V_MAX, V_UNIT FROM SENSOR WHERE SENSOR_ID = P_SENSOR_ID;
    INSERT INTO SENSOR_READING (SENSOR_ID, READING_TS, POWER_W, TEMP_C, HUMIDITY_PCT)
    VALUES (P_SENSOR_ID, SYSTIMESTAMP, P_VALUE_W, P_TEMP_C, P_HUM_PCT);
    IF V_MIN IS NOT NULL AND P_VALUE_W < V_MIN THEN
      V_LEVEL := 'CRITICAL'; V_MSG := 'Abaixo do mínimo ('||P_VALUE_W||' '||V_UNIT||')';
    ELSIF V_MAX IS NOT NULL AND P_VALUE_W > V_MAX THEN
      V_LEVEL := 'CRITICAL'; V_MSG := 'Acima do máximo ('||P_VALUE_W||' '||V_UNIT||')';
    ELSE
      V_LEVEL := 'INFO'; V_MSG := 'Leitura registrada: '||P_VALUE_W||' '||V_UNIT;
    END IF;
    INSERT INTO ALERT (SENSOR_ID, ALERT_TS, LEVEL, MESSAGE, META_JSON)
    VALUES (P_SENSOR_ID, SYSTIMESTAMP, V_LEVEL, V_MSG, NULL)
    RETURNING ALERT_ID INTO P_ALERT_ID;
    PKG_SMART_HAS.PR_LOG_AUDIT('ALERT', P_ALERT_ID, 'CREATE', V_MSG);
  END;
  PROCEDURE PR_LOG_AUDIT (P_ENTITY IN VARCHAR2, P_ID IN NUMBER, P_ACTION IN VARCHAR2, P_DETAILS IN VARCHAR2) IS
  BEGIN
    INSERT INTO AUDIT_LOG (ENTITY, ENTITY_ID, ACTION, DETAILS)
    VALUES (SUBSTR(P_ENTITY,1,50), P_ID, SUBSTR(P_ACTION,1,50), SUBSTR(P_DETAILS,1,4000));
  END;
  PROCEDURE PR_QUERY_READINGS_DYNAMIC (P_TABLE_NAME IN VARCHAR2, P_WHERE_CLAUSE IN VARCHAR2, P_CURSOR OUT SYS_REFCURSOR) IS
    V_SQL CLOB;
  BEGIN
    IF REGEXP_LIKE(P_TABLE_NAME, '^[A-Z_][A-Z0-9_]*$', 'i') = FALSE THEN
      RAISE_APPLICATION_ERROR(-20001, 'Nome de tabela inválido');
    END IF;
    V_SQL := 'SELECT * FROM '||P_TABLE_NAME;
    IF P_WHERE_CLAUSE IS NOT NULL AND TRIM(P_WHERE_CLAUSE) <> '' THEN
      V_SQL := V_SQL || ' WHERE '||P_WHERE_CLAUSE;
    END IF;
    OPEN P_CURSOR FOR V_SQL;
  END;
END PKG_SMART_HAS;
/
SHOW ERRORS;
